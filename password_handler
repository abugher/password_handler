#!/usr/bin/ruby -w
# password_handler
#
#
# Written by Aaron Bugher for personal use.
#
# LICENSE:
#
# Copyright (c) 2012, Aaron Bugher
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of the FreeBSD Project.
#
# END LICENSE
#
# Notes:
#
#   rand() sucks.  It seeds from the time.  /dev/urandom is used to get some
#   good entropy.

for utility in ["stty", "printf", "dd", "echo", "sha512sum", "xclip", "base64"]
  if ! (system "which #{utility} > /dev/null 2>&1")
    puts "You need to have #{utility} installed.  Exiting."
    exit false
  end
end

STDOUT.sync = true
# Work in the home directory only, for simplicity.
Dir.chdir
list_file_name = ".password_handler_site_list"
master_hash_file_name = ".password_handler_master_hash"
master_salt_file_name = ".password_handler_master_salt"
site = ""


# Get password and don't print it.
print "Master password:  "
`stty -echo`
password = gets.chomp
`stty echo`
print "\n"

# Test for password correctness.
if ! (File.exists? master_hash_file_name and File.exists? master_salt_file_name)
  print "Confirm master password:  "
  `stty -echo`
  confirm_password = gets.chomp
  `stty echo`
  print "\n"
  if password == confirm_password
    master_hash_file_handle = File.new master_hash_file_name, "w"
    puts "Created: #{master_hash_file_name}"
    master_salt_file_handle = File.new master_salt_file_name, "w"
    puts "Created: #{master_salt_file_name}"
    master_salt = `dd if=/dev/urandom bs=1 count=1024 2>/dev/null | base64 --wrap=0`
    master_salt_file_handle << master_salt
    master_hash = `echo \"#{master_salt}#{password}\" | sha512sum -`
    master_hash.sub(/\ -\ /, '')
    master_hash_file_handle << master_hash
    master_salt_file_handle.close
    master_hash_file_handle.close
  else
    puts "Passwords do not match."
    exit
  end
end

master_salt = File.read(master_salt_file_name)
master_hash = `echo \"#{master_salt}#{password}\" | sha512sum -`
master_hash.sub(/\ -\ /, '')
saved_master_hash = File.read(master_hash_file_name)

if master_hash != saved_master_hash
  puts "Password seems wrong.  Exiting."
  # Debug:
  puts master_hash
  puts
  puts saved_master_hash
  exit
end

while true
  # generate list of known sites
  list = Array.new
  if ! File.exists? list_file_name
    list_file_handle = File.new list_file_name, "w"
    puts "Created: #{list_file_name}"
    list_file_handle.close
  end
  list_file_handle = File.open list_file_name, "r"
  while entry = list_file_handle.gets
    list.push Hash.new
    list.last["site"] = entry.chomp.sub(/\A[^ ]* (.*)\Z/, '\1')
    list.last["salt"] = entry.chomp.sub(/\A([^ ]*) .*\Z/, '\1')
  end
  list_file_handle.close

  # get site name
  while true
    print "Site (name, index number, [l]ist, or [q]uit):  "
    if (site = gets.chomp) =~ /^[Ll]$/
      # paging might be nice, here
      list.each_index {|i| puts "#{i}\t#{list[i]["site"]}"} 
    else break
    end
  end

  # interpret index - no bounds checking, yet ...
  if site =~ /^[0-9]*$/ 
    salt = list[site.to_i]["salt"]
    site = list[site.to_i]["site"]
  elsif site == "q"
    exit true
  else
    new_site = "y"
    list.each {|entry| if entry["site"] == site then new_site = "n" end}
    if new_site == "y"
      print "New site name detected.  Make a record? [Y/n] "
      if ! (gets.chomp =~ /^[Nn]$/)
        salt = `dd if=/dev/urandom bs=1 count=1024 2>/dev/null | base64 --wrap=0`
        list_file_handle = File.open list_file_name, "a"
        list_file_handle.puts "#{salt} #{site}"
        list_file_handle.close
      end
    end
  end

  hash = ""

  # Massage the hash into a password likely to work with any website.
  # Rehash if it doesn't have certain characteristics.
  begin
    # Hash salt, password, site name, and (after first iteration) old hash.
    hash = `echo \"#{salt}#{password}#{site}#{hash}\" | sha512sum -`
    hash.sub(/\ -\ /, '')
    # First eight characters only.
    hash = hash[0..8]
  end while (hash =~ /^[a-z]*$/ || (!(hash =~ /[a-z].*[a-z]/)) )
  # above:  not all letters, minimum two letters

  # Pick a character to capitalize at not-quite-random.
  cap_index = (hash[0] + hash[1] + hash[2]) % 8

  # Increment cap_index until it indexes a character.
  temp_hash = ""
  temp_hash.concat hash[cap_index]
  while ! (temp_hash =~ /[a-z]/)
    cap_index += 1
    if cap_index == 8 then cap_index = 0 end
    temp_hash.concat hash[cap_index]
  end

  # Capitalize chosen character.
  temp_hash = ""
  old_hash = hash
  hash = ""
  for c in 0..7
    if c == cap_index
      temp_hash.concat old_hash[c]
      hash.concat temp_hash.capitalize
    else 
      hash.concat old_hash[c]
    end
  end


  system "printf \"%s\" \"#{hash}\" | xclip -i"
  puts "Password is ready to paste."
end
